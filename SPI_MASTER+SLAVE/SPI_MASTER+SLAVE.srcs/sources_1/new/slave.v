
module slave(
      input clk,              //clock signal(it is generated by the master)
      input reset,            //reset
      
      input mosi,              //input data from master
      output miso,               //output data sent to master
      input cs,                 //signal from master that starts data transmission
      input pl,                 //paralel load
      
      input [7:0]data_in,        //used to add initial values on shift register
      output [7:0]data_out       //used for debug
    );
    
    wire [2:0] out_cnt; //output from counter
    wire enable_cnt;
    wire enable_shift;
    
    
    
    counter cnt_s(
    .clk(clk),                     //input
    .reset(reset),                  //input
    .enable(enable_cnt),            //input
    .out_cnt(out_cnt)               //output
   );
    
    shift_register_slave shift_s(
        .clk(clk),                      //input
        .reset(reset),                  //input
        .enable(enable_shift),          //input
        .mosi(mosi),                    //input
        .pl(pl),                        //input
        .data_in(data_in),              //input
        .miso(miso),                    //output
        .data_out(data_out)             //output
    );
    
    
     fsm_slave fsm_s(
    .clk(clk),                     //input
    .reset(reset),                  //input
    .cs(cs),                        //input
    .bit_cnt(out_cnt),              //input
    .enable_cnt(enable_cnt),        //output
    .enable_shift(enable_shift)     //output
   );
   
endmodule